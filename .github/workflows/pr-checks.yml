# .github/workflows/pr-checks.yml
name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]

jobs:
  lint-and-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Node.js (example)
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          # Add your build commands here
          echo "Installing dependencies..."
          # npm install

      - name: Lint
        run: |
          echo "Running linting..."
          # npm run lint

      - name: Build
        run: |
          echo "Building project..."
          # npm run build

      - name: Test
        run: |
          echo "Running tests..."
          # npm test

  check-approvals:
    runs-on: ubuntu-latest
    steps:
      - name: Check approvals
        run: |
          echo "Fetching reviews for PR #${{ github.event.number }}..."
          
          # Get reviews with better error handling
          RESPONSE=$(curl -s -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.number }}/reviews")
          
          # Extract HTTP status code (last 3 digits)
          HTTP_CODE="${RESPONSE: -3}"
          # Extract response body (everything except last 3 digits)
          BODY="${RESPONSE%???}"
          
          echo "HTTP Status: $HTTP_CODE"
          echo "Response body: $BODY"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ API request failed with status $HTTP_CODE"
            echo "Response: $BODY"
            exit 1
          fi
          
          # Check if response is valid JSON array
          if ! echo "$BODY" | jq empty 2>/dev/null; then
            echo "❌ Invalid JSON response"
            echo "Response: $BODY"
            exit 1
          fi
          
          # Count approved reviews
          APPROVALS=$(echo "$BODY" | jq '[.[] | select(.state == "APPROVED")] | length' 2>/dev/null || echo "0")
          
          echo "Current approvals: $APPROVALS"
          echo "All reviews:"
          echo "$BODY" | jq -r '.[] | "- \(.user.login): \(.state)"' 2>/dev/null || echo "No reviews found"
          
          if [ "$APPROVALS" -ge 1 ]; then
            echo "✅ PR has sufficient approvals ($APPROVALS)"
          else
            echo "❌ PR needs at least 1 approval (current: $APPROVALS)"
            exit 1
          fi

  check-linked-prs:
    runs-on: ubuntu-latest
    steps:
      - name: Verify no open linked PRs
        run: |
          echo "Checking for linked submodule PRs..."
          
          # Get PR comments with better error handling
          COMMENTS_RESPONSE=$(curl -s -w "%{http_code}" \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.number }}/comments")
          
          # Extract HTTP status and body
          HTTP_CODE="${COMMENTS_RESPONSE: -3}"
          COMMENTS_BODY="${COMMENTS_RESPONSE%???}"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "❌ Failed to fetch comments: HTTP $HTTP_CODE"
            echo "Response: $COMMENTS_BODY"
            exit 1
          fi
          
          echo "Fetched comments successfully"
          
          # Extract linked PR URLs
          LINKED_PRS=$(echo "$COMMENTS_BODY" | jq -r '
            .[] | 
            select(.body | contains("Linked Submodule PRs")) | 
            .body' | \
            grep -oE 'https://github\.com/[^/]+/[^/]+/pull/[0-9]+' | head -10 || true)
          
          if [ -z "$LINKED_PRS" ]; then
            echo "ℹ️  No linked submodule PRs found"
            echo "✅ All linked PRs check passed (no linked PRs)"
            exit 0
          fi
          
          echo "Found linked PRs:"
          echo "$LINKED_PRS"
          
          ALL_CLOSED=true
          
          while IFS= read -r PR_URL; do
            if [ -n "$PR_URL" ]; then
              # Extract repo and PR number from URL
              REPO=$(echo "$PR_URL" | sed 's|https://github\.com/||; s|/pull/.*||')
              PR_NUM=$(echo "$PR_URL" | sed 's|.*/pull/||')
              
              echo "Checking $REPO#$PR_NUM..."
              
              # Check PR status
              PR_RESPONSE=$(curl -s -w "%{http_code}" \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: token ${{ secrets.SUBMODULE_REPO_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/$REPO/pulls/$PR_NUM")
              
              PR_HTTP_CODE="${PR_RESPONSE: -3}"
              PR_BODY="${PR_RESPONSE%???}"
              
              if [ "$PR_HTTP_CODE" != "200" ]; then
                echo "⚠️  Failed to check $REPO#$PR_NUM: HTTP $PR_HTTP_CODE"
                echo "Assuming PR is closed/merged"
                continue
              fi
              
              PR_STATUS=$(echo "$PR_BODY" | jq -r '.state' 2>/dev/null || echo "unknown")
              
              echo "  Status: $PR_STATUS"
              
              if [ "$PR_STATUS" = "open" ]; then
                ALL_CLOSED=false
                echo "  ❌ Still open"
              else
                echo "  ✅ Closed/merged"
              fi
            fi
          done <<< "$LINKED_PRS"
          
          if [ "$ALL_CLOSED" = "true" ]; then
            echo ""
            echo "✅ All linked PRs are resolved - ready to merge!"
            exit 0
          else
            echo ""
            echo "❌ Some linked PRs are still open - cannot merge base PR yet"
            echo "Please wait for all linked submodule PRs to be closed or merged"
            exit 1
          fi

# Branch protection rule configuration (via GitHub API or UI)
# POST /repos/{owner}/{repo}/branches/{branch}/protection
# {
#   "required_status_checks": {
#     "strict": true,
#     "contexts": [
#       "lint-and-build",
#       "check-approvals", 
#       "check-linked-prs"
#     ]
#   },
#   "enforce_admins": false,
#   "required_pull_request_reviews": {
#     "required_approving_review_count": 1,
#     "dismiss_stale_reviews": true
#   },
#   "restrictions": null
# }